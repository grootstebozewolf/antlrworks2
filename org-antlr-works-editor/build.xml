<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See harness/README in the NetBeans platform -->
<!-- for some information on what you could do (e.g. targets to override). -->
<!-- If you delete this file and reopen the project it will be recreated. -->
<project name="org.antlr.works.editor" default="netbeans" basedir=".">
    <description>Builds, tests, and runs the project org.antlr.works.editor.</description>
    <import file="nbproject/build-impl.xml"/>

    <target name="init-complete-artifact">
        <property name="artifact.name" value="antlr4-complete"/>
        <property name="artifact.commit" value="4.5.3"/>
        <property name="grammar.resources.dir" value="src/org/antlr/works/editor/grammar/resources"/>
        <property name="modules.cache.dir" value="lib/cache"/>
        <property name="artifact.intermediatefile" value="${modules.cache.dir}/${artifact.name}-${artifact.commit}.jar"/>
        <property name="complete-artifact.file" value="${grammar.resources.dir}/${artifact.name}.jar"/>
    </target>

    <target name="download-complete-artifact" depends="init-complete-artifact,harness.build-init">
        <mkdir dir="${grammar.resources.dir}"/>
        <mkdir dir="${modules.cache.dir}"/>
        <get src="http://tunnelvisionlabs.com/downloads/antlr/build/${artifact.name}-${artifact.commit}.jar"
             dest="${artifact.intermediatefile}"
             skipexisting="true"/>
        <copy file="${artifact.intermediatefile}" tofile="${complete-artifact.file}"/>
    </target>

    <target name="clean-generated-sources">
        <delete failonerror="true" includeemptydirs="true">
            <fileset dir="${basedir}" includes="src/**/generated/**"/>
        </delete>
    </target>

    <target name="clean" depends="init-complete-artifact,projectized-common.clean,clean-generated-sources">
        <delete file="${complete-artifact.file}"/>
    </target>

    <target name="antlr-init" depends="harness.build-init">
        <property name="antlr4.jar" value="${basedir}/../org-antlr-v4/release/modules/ext/antlr4.jar"/>
        <property name="antlr4_runtime.jar" value="${basedir}/../org-antlr-v4-runtime/release/modules/ext/antlr4_runtime.jar"/>
        <property name="st4.jar" value="${basedir}/../org-stringtemplate-v4/release/modules/ext/st4.jar"/>
        <property name="antlr3_runtime.jar" value="${basedir}/../org-antlr-runtime/release/modules/ext/antlr3_runtime.jar"/>

        <path id="cp.antlr4">
            <pathelement location="${antlr4.jar}"/>
            <pathelement location="${antlr4_runtime.jar}"/>
            <pathelement location="${st4.jar}"/>
            <pathelement location="${antlr3_runtime.jar}"/>
        </path>

        <property name="antlr4.touch" value="${build.dir}/antlr4.touch" />
    </target>

    <target name="build-init" depends="antlr-init,harness.build-init,download-complete-artifact"/>

    <target name="antlr4-up-to-date" depends="antlr-init">
        <uptodate targetfile="${antlr4.touch}" property="is.antlr4.uptodate">
            <!-- TODO: rebuild grammars if we switch to a new build of the tool -->
            <srcfiles dir="${src.dir}">
                <include name="**/*.g4"/>
                <include name="**/*.tokens"/>
                <exclude name="**/generated/**"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="up-to-date" depends="antlr4-up-to-date,projectized-common.up-to-date">
        <condition property="is.all.uptodate">
            <and>
                <istrue value="${is.jar.uptodate}"/>
                <istrue value="${is.antlr4.uptodate}"/>
            </and>
        </condition>
        <echo message="Setting is.jar.uptodate from is.all.uptodate" />
        <property name="${is.jar.uptodate}" value="${is.all.uptodate}" />
        <echo message="Set is.jar.uptodate to ${is.jar.uptodate}" />
    </target>

    <target name="compile" depends="init,up-to-date,antlr4,projectized-common.compile" unless="is.jar.uptodate" />

    <macrodef name="antlr4">
        <attribute name="srcpath"/>
        <element name="args" optional="true"/>
        <sequential>
            <local name="package"/>
            <local name="paths.antlr4.local"/>
            <pathconvert property="package" dirsep=".">
                <path location="${src.dir}/@{srcpath}"/>
                <map from="${src.dir}/" to=""/>
            </pathconvert>
            <path id="sources.antlr4.@{srcpath}">
                <fileset dir="${src.dir}/@{srcpath}" includes="*.g4"/>
            </path>
            <pathconvert property="paths.antlr4.local" refid="sources.antlr4.@{srcpath}" pathsep=" ">
                <map from="${src.dir}/@{srcpath}/" to=""/>
            </pathconvert>
            <java classname="org.antlr.v4.Tool" fork="true" failonerror="true" dir="${src.dir}/@{srcpath}">
                <arg value="-o"/>
                <arg value="generated"/>
                <arg value="-package"/>
                <arg value="${package}.generated"/>
                <args/>
                <arg line="${paths.antlr4.local}"/>
                <classpath>
                    <path refid="cp.antlr4"/>
                    <pathelement location="${java.class.path}"/>
                </classpath>
            </java>
        </sequential>
    </macrodef>

    <target name="antlr4" depends="antlr-init,harness.build-init,antlr4-up-to-date" unless="is.antlr4.uptodate">
        <path id="sources.antlr4">
            <fileset dir="${src.dir}" includes="**/*.g4"/>
        </path>
        <pathconvert pathsep="${line.separator}  " property="echo.sources.antlr4" refid="sources.antlr4">
            <map from="${src.dir}/" to=""/>
        </pathconvert>
        <echo message="Generating ANTLR 4 grammars:${line.separator}  ${echo.sources.antlr4}"/>

        <parallel threadsperprocessor="1" failonany="true">
            <antlr4 srcpath="org/antlr/works/editor/grammar/experimental">
                <args>
                    <arg value="-visitor"/>
                    <arg value="-Xforce-atn"/>
                </args>
            </antlr4>

            <antlr4 srcpath="org/antlr/works/editor/grammar/highlighter"/>

            <antlr4 srcpath="org/antlr/works/editor/st4/experimental">
                <args>
                    <arg value="-visitor"/>
                    <arg value="-Xforce-atn"/>
                </args>
            </antlr4>

            <antlr4 srcpath="org/antlr/works/editor/st4/highlighter"/>
        </parallel>

        <touch file="${antlr4.touch}" mkdirs="true"/>
    </target>

</project>
